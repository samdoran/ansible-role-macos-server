---
- name: Check for Xcode Command Line Tools
  stat: path=/Library/Developer/CommandLineTools
  register: xcode_cl_tools
  tags: [ 'osx' , 'xcode' ]

- name: Login to continue
  pause:
    prompt="Login to complete the installation of the Xcode comamnd line tools. Press Enter when logged in"
  when: not xcode_cl_tools.stat.exists
  tags: [ 'osx' , 'xcode' ]

- name: Install Xcode command line tools
  command: xcode-select --install
    creates=/Library/Developer/CommandLineTools
  # register: xcode_cl_tools
  tags: [ 'osx' , 'xcode' ]

- name: Wait until command line tools are installed
  wait_for:
    path="/private/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
    timeout=600
    state=absent
  tags: [ 'osx' , 'xcode' ]

- name: Check if Homebrew is installed
  stat: path=/usr/local/bin/brew
  register: homebrew_check
  tags: [ 'osx' , 'homebrew' ]

- name: Install Homebrew
  shell: 'echo "\r" | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
  sudo: no
  when: not homebrew_check.stat.exists
  tags: [ 'osx' , 'homebrew' ]

- name: Install packages
  homebrew:
    update_homebrew=yes
    upgrade_all=yes
    name={{ item }}
    state=latest
  sudo: no
  with_items: osxs_packages
  tags: [ 'osx' , 'homebrew', 'packages' ]

- name: Enable or disable OS X Server services
  osx_serveradmin: name={{ item.name }} state={{ item.state }}
  with_items: osxs_service_state
  tags: [ 'osx' , 'services' ]

- name: Set user defaults
  osx_defaults:
    domain={{ item.domain }}
    key={{ item.key }}
    type={{ item.type }}
    value="{{ item.value }}"
  sudo: no
  with_items: osxs_user_defaults
  tags: test
  tags: [ 'osx' , 'defaults' ]

- name: Set system defaults
  osx_defaults:
    domain={{ item.domain }}
    key={{ item.key }}
    type={{ item.type }}
    value="{{ item.value }}"
  with_items: osxs_system_defaults
  tags: test
  tags: [ 'osx' , 'defaults' ]

- name: Setup sudo for admin group
  lineinfile: >
    state=present
    backup=yes
    dest=/etc/sudoers
    regexp='^%admin'
    line='%admin ALL=(ALL) NOPASSWD: ALL'
  tags: [ 'osx' , 'sudo' ]

- name: Copy /etc/issue
  copy:
    src=issue
    dest=/etc/issue
    owner=root
    group=wheel
    mode=0644
  tags: [ 'osx' , 'ssh' ]


- name: Configure ssh
  template:
    backup=yes
    src=sshd_config.j2
    dest=/etc/sshd_config
    owner=root
    group=wheel
    mode=0644
  tags: [ 'osx' , 'ssh' ]

- name: Make directory for ansible files
  file:
    dest=/etc/ansible
    state=directory
    owner=root
    group=wheel
    mode=0700
  tags: [ 'osx' , 'osxconfig' ]

- name: Copy serveradmin settings file
  template:
    src=serveradmin_settings.j2
    dest={{ osxs_config_directory}}/serveradmin_settings
    owner=root
    group=wheel
    mode=0600
  notify:
    - apply settings
    - reload services
  tags: [ 'osx' , 'osxconfig' ]

- name: Copy systemsetup.sh script
  template:
    src=systemsetup.sh.j2
    dest={{ osxs_config_directory }}/systemsetup.sh
    owner=root
    group=wheel
    mode=0700
  notify: run systemsetup.sh
  tags: [ 'osx' , 'osxconfig' ]

- name: Copy networksetup.sh script
  template:
    src=networksetup.sh.j2
    dest={{ osxs_config_directory }}/networksetup.sh
    owner=root
    group=wheel
    mode=0700
  notify: run networksetup.sh
  tags: [ 'osx' , 'osxconfig' ]

- name: Set hostname
  osx_changeip: name={{ osxs_fqdn }}
  notify: reboot
  tags: [ 'osx' , 'osxconfig' ]

- { include: extras.yml, tags: [ 'osx' , 'osxextras' ] }
